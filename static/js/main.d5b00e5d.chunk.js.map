{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","diaSemana","setDiaSemana","fecha","setFecha","hora","setHora","element","useRef","nombresDia","nombresMes","cambiarHora","date","Date","diaSem","getDay","diaMes","getDate","mes","getMonth","year","getFullYear","getHours","min","getMinutes","seg","getSeconds","current","classList","add","remove","useEffect","setInterval","className","ref","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d5b00e5d.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\nfunction App() {\n  const [diaSemana, setDiaSemana] = useState(\"Lunes\");\n  const [fecha, setFecha] = useState(\"1 Enero 2000\");\n  const [hora, setHora] = useState(\"00:00:00\");\n\n  const element = useRef();\n\n  const nombresDia = [\n    \"Domingo\",\n    \"Lunes\",\n    \"Martes\",\n    \"Miercoles\",\n    \"Jueves\",\n    \"Viernes\",\n    \"Sabado\",\n  ];\n\n  const nombresMes = [\n    \"Enero\",\n    \"Febrero\",\n    \"Marzo\",\n    \"Abril\",\n    \"Mayo\",\n    \"Junio\",\n    \"Julio\",\n    \"Agosto\",\n    \"Septiembre\",\n    \"Octubre\",\n    \"Noviembre\",\n    \"Diciembre\",\n  ];\n\n  function cambiarHora() {\n    let date = new Date();\n    let diaSem = nombresDia[date.getDay()];\n    let diaMes = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\n    let mes = nombresMes[date.getMonth()];\n    let year = date.getFullYear();\n\n    let hora = date.getHours() > 12 ? date.getHours() - 12 : date.getHours();\n    hora = hora < 10 ? `0${hora}` : hora;\n    let min =\n      date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes();\n    let seg =\n      date.getSeconds() < 10 ? `0${date.getSeconds()}` : date.getSeconds();\n\n    setDiaSemana(`${diaSem}`);\n    setFecha(`${diaMes} ${mes} ${year}`);\n    setHora(`${hora}:${min}:${seg}`);\n\n    if (date.getMinutes() === 19 && date.getSeconds() % 2 === 0) {\n      element.current.classList.add(\"en-punto\");\n    } else {\n      element.current.classList.remove(\"en-punto\");\n    }\n  }\n\n  useEffect(() => {\n    setInterval(cambiarHora, 500);\n  });\n\n  return (\n    <div className=\"content fecha-hora\" ref={element}>\n      <div className=\"hora\">{hora}</div>\n      <div className=\"fecha\">{fecha}</div>\n      <div className=\"dia-semana\">{diaSemana}</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}